package spongebob;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class Spb extends JPanel implements MouseListener, MouseMotionListener {
	
	private int rectX, rectY,sqX,sqY,cirX,cirY;
	private int mouseX, mouseY,mouseX1,mouseY1,mouseX2,mouseY2;
	private boolean dragging,dragging1,dragging2;
	private boolean[] shapeHidden = {false, false, false};
	
	
	
	public Spb(){
		rectX = 175;
		rectY = 600;
		sqX = 500;
		sqY = 600;
		cirX = 825;
		cirY = 600;
		addMouseListener(this);
		addMouseMotionListener(this);
	}
	protected void paintComponent (Graphics g) {
		
		super.paintComponent(g);
		g.setColor(Color.BLUE);
		g.fillRect(150, 150, 200, 240);
		
		g.setColor(Color.RED);
		g.fillOval(170, 170, 50, 50);
		
		g.setColor(Color.RED);
		g.fillOval(280, 170, 50, 50);
		
		if(!shapeHidden[0]) {
		g.setColor(Color.black);
		g.fillRect(rectX, rectY, 150, 50);
		}
		
		g.setColor(Color.black);
		g.drawRect(175, 300, 150, 50);
		
		g.setColor(Color.red);
		g.fillRect(280, 390, 30, 110);
		g.fillRect(190, 390, 30, 110);
		
		g.setColor(Color.yellow);
		g.fillOval(185, 490, 40, 40);
		
		g.setColor(Color.yellow);
		g.fillOval(275, 490, 40, 40);
		
		//Second-------------------------------------------------------------
		
		g.setColor(Color.green);
		g.fillRect(450, 150, 160, 240);
		
		g.setColor(Color.RED);
		g.fillRect(470, 170, 30, 30);
		g.fillRect(560, 170, 30, 30);
		
		if(!shapeHidden[1]) {
		g.setColor(Color.black);
		g.fillRect(sqX, sqY, 50, 50);
		}
		g.setColor(Color.black);
		g.drawRect(500, 300, 50, 50);
		
		g.setColor(Color.YELLOW);
		g.fillRect(480, 390, 30, 110);
		g.fillRect(550, 390, 30, 110);
		
		g.setColor(Color.RED);
		g.fillOval(475, 490, 40, 40);
		
		g.setColor(Color.RED);
		g.fillOval(545, 490, 40, 40);
		
		//Third-------------------------------------------------------------
		g.setColor(Color.yellow);
		g.fillOval(730, 150, 240, 240);
		
		g.setColor(Color.blue);
		g.fillOval(790, 200, 30, 30);
		g.fillOval(880, 200, 30, 30);
		
		if(!shapeHidden [2]) { //if hindi nakatago yung shape ipprint out yung shape
		g.setColor(Color.black);
		g.fillOval(cirX, cirY, 50, 50);
		}
		
		g.setColor(Color.black);
		g.drawOval(825, 300, 50, 50);
		
		g.setColor(Color.red);
		g.fillRect(780, 370, 30, 110);
		g.fillRect(890, 370, 30, 110);
		
		g.setColor(Color.green);
		g.fillOval(775, 470, 40, 40);
		
		g.setColor(Color.green);
		g.fillOval(885, 470, 40, 40);
			
	}
	

	public void mousePressed (MouseEvent e) {
		
		if (e.getX() >= rectX && e.getX() <= rectX + 150 && e.getY() >= rectY && e.getY() <= rectY + 50) {
			dragging = true;
			mouseX = e.getX();
			mouseY = e.getY();
		}
		if (e.getX() >= sqX && e.getX() <= sqX + 50 && e.getY() >= sqY && e.getY() <= sqY + 50) {
			dragging1 = true;
			mouseX1 = e.getX();
			mouseY1 = e.getY();
		}
		if (e.getX() >= cirX && e.getX() <= cirX + 50 && e.getY() >= cirY && e.getY() <= cirY + 50) {
			dragging2 = true;
			mouseX2 = e.getX();
			mouseY2 = e.getY();
		}
		
	}
	
	public void mouseReleased (MouseEvent e) {
		dragging = false;
		dragging1 = false;
		dragging2 = false;
		
		if (e.getX() >= 175 && e.getX() <= 175 + 150 && e.getY() >= 300 && e.getY() <= 300 + 50) {
			
			shapeHidden[0] = true;
			repaint();
		}
		
		if (e.getX() >= 500 && e.getX() <= 500 + 50 && e.getY() >= 300 && e.getY() <= 300 + 50) {
			
			shapeHidden[1] = true;
			repaint();
		}
		
		if (e.getX() >= 825 && e.getX() <= 825 + 50 && e.getY() >= 300 && e.getY() <= 300 + 50) {
			
			shapeHidden[2] = true;
			repaint();
		}
		
		
		
		
		
	}
	
	public void mouseDragged (MouseEvent e) {
		
		if(dragging) {
			//Calculate the distance moved by the mouse
			int dx = e.getX() - mouseX;
			int dy = e.getY() - mouseY;
			
			//Updates the position of the box accordingly
			
			rectX += dx;
			rectY += dy;
			
			//Updates the current mouse position
			
			mouseX = e.getX();
			mouseY = e.getY();
			
			//Repaints the panel to update the box's position
			repaint();
			
		}
		if(dragging1) {
			//Calculate the distance moved by the mouse
			int dx = e.getX() - mouseX1;
			int dy = e.getY() - mouseY1;
			
			//Updates the position of the box accordingly
			
			sqX += dx;
			sqY += dy;
			
			//Updates the current mouse position
			
			mouseX1 = e.getX();
			mouseY1 = e.getY();
			
			//Repaints the panel to update the box's position
			repaint();
			
		}
		 if(dragging2) {
			//Calculate the distance moved by the mouse
			int dx = e.getX() - mouseX2;
			int dy = e.getY() - mouseY2;
			
			//Updates the position of the box accordingly
			
			cirX += dx;
			cirY += dy;
			
			//Updates the current mouse position
			
			mouseX2 = e.getX();
			mouseY2 = e.getY();
			
			//Repaints the panel to update the box's position
			repaint();
			
		}
		
	}
	
	public void mouseMoved(MouseEvent e) {
		// Not used in this example
	}
	
	public void mouseEntered(MouseEvent e) {
		// Not used in this example
	}
	
	public void mouseExited(MouseEvent e) {
		// Not used in this example
	}
	public void mouseClicked(MouseEvent e) {
		// Not used in this example
	}
	
	
	

	public static void main(String[] args) {
		JFrame frame = new JFrame("Drag and Drop(MOVING THE BOX)");
		frame.setSize(1260, 720);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocationRelativeTo(null);
		frame.setResizable(false);
		Spb abc = new Spb();
		frame.add(abc);
		frame.setVisible(true);

	}

}
